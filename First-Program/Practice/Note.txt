for custome package create 
--go mod init example.com 
then import "example.com/mathlib"
must be Capital first later function name and veriable name
-------function type----
standard/name function/ : add(a,b int){}
init function: you can't call this, computer calls this automatically init() init function first open
Anonymous function func(x,y int){}(5,7)
Immediately Invoked Function Expression func(x,y int){}(5,7)
function expression or Assign function in variable add := func(x,y int){} function expression must be declare before call function.
----Parameter vs Argument-----
function will be value this call Parameter
function will send value this call Argument
---First Order Function---
    1. standard function/named function
    2.Anonymous function
    3.IIFE
    4.Function Expression
----Higher order Function/first class function---
function paradigm-> haskel, racket,
any one of the follwing 3 for higher order function/first class function
    1.parameter-> function will be recive
    2.will be function return
    3. both
example of higher order function:
func process(a int,b int,op func(p int, q int)){
    op(a,b)
}

func add(x int, y int){
    z := x+y
    fmt.Println(z)
}

func main(){
    process(2,5, add)
}
--------example end-----------

---example of function return--
func call()func(x int, y int){
    return add
}

func add(x int, y int){
    z := x+y
    fmt.Println(z)
}

func main(){
    sum := call()
    sum(4,7)
}
--------end example-----
------Callback function-----
when any (higher order function) function will be parameter/Argument recive it's call callback function
---example Callback function---
func process(a int,b int,op func(p int, q int)){
    op(a,b)
}
----end example callback function-----
First Class citizen -> (variable assign data)
----Closure-Close over--------



--------GO- Internal Memory---------
Code segment -> All function & constant variable will be hold code segment(read only memory)
Data segment -> All Global & static variables
Stack -> Every when Function calls & local variables that time it's call stack frame
Heap-Garbage collector
-----Compile Go file----
go run main.go-> Compile it->main-> ./main
go build mail.go -> Compile it-> main

if you executive run this command(./main)

Phase:
    1.Compilation Phase
    2.Execution Phase

-----Compilation Phase-----
----Code Segment--
constant variable & all function and find main function if not found then will show error.

